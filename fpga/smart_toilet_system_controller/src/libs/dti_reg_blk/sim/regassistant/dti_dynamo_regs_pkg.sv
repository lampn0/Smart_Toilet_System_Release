//----------------------------------------------------------------------
//   THIS IS AUTOMATICALLY GENERATED CODE
//   Generated by Mentor Graphics' Register Assistant V2019.3 (Build 1)
//   UVM Register Kit version 1.1
//----------------------------------------------------------------------
// Project         : dti_reg_blk
// Unit            : dti_dynamo_regs_pkg
// File            : dti_dynamo_regs_pkg.sv
//----------------------------------------------------------------------
// Created by      : lampn0
// Creation Date   : 6/21/22 3:03 PM
//----------------------------------------------------------------------
// Title           : dti_reg_blk
//
// Description     : 
//
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// dti_dynamo_regs_pkg
//----------------------------------------------------------------------
package dti_dynamo_regs_pkg;

   import uvm_pkg::*;

   `include "uvm_macros.svh"

   /* DEFINE REGISTER CLASSES */



   //--------------------------------------------------------------------
   // Class: ctrl
   // 
   // Control Register
   //--------------------------------------------------------------------

   class ctrl extends uvm_reg;
      `uvm_object_utils(ctrl)

      uvm_reg_field rfu; // Reserved for Future Use
      rand uvm_reg_field warm_en; // Warm up enable
                                 // 0: Disable
                                 // 1: Enable


      // Function: coverage
      // 
      covergroup cg_vals;
         warm_en	 : coverpoint warm_en.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "ctrl");
         super.new(name, 32, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         rfu = uvm_reg_field::type_id::create("rfu");
         warm_en = uvm_reg_field::type_id::create("warm_en");

         rfu.configure(this, 31, 1, "RW", 0, 31'b0000000000000000000000000000000, 1, 0, 0);
         warm_en.configure(this, 1, 0, "RW", 0, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: data
   // 
   // Data Register
   //--------------------------------------------------------------------

   class data extends uvm_reg;
      `uvm_object_utils(data)

      uvm_reg_field rfu; // Reserved for Future Use
      uvm_reg_field tem; // Temperature Data


      // Function: coverage
      // 
      covergroup cg_vals;
         tem	 : coverpoint tem.value[1:0];
      endgroup



      // Function: new
      // 
      function new(string name = "data");
         super.new(name, 32, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         rfu = uvm_reg_field::type_id::create("rfu");
         tem = uvm_reg_field::type_id::create("tem");

         rfu.configure(this, 30, 2, "RW", 0, 30'b000000000000000000000000000000, 1, 0, 0);
         tem.configure(this, 2, 0, "RO", 0, 2'b00, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: stt
   // 
   // Status Register
   //--------------------------------------------------------------------

   class stt extends uvm_reg;
      `uvm_object_utils(stt)

      uvm_reg_field rfu; // Reserved for Future Use
      uvm_reg_field drying; // Status Drying
      uvm_reg_field spraying; // Status Spraying
      uvm_reg_field using; // Status Using
      uvm_reg_field ready; // Ready for using


      // Function: coverage
      // 
      covergroup cg_vals;
         drying	 : coverpoint drying.value[0];
         spraying	 : coverpoint spraying.value[0];
         using	 : coverpoint using.value[0];
         ready	 : coverpoint ready.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "stt");
         super.new(name, 32, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         rfu = uvm_reg_field::type_id::create("rfu");
         drying = uvm_reg_field::type_id::create("drying");
         spraying = uvm_reg_field::type_id::create("spraying");
         using = uvm_reg_field::type_id::create("using");
         ready = uvm_reg_field::type_id::create("ready");

         rfu.configure(this, 28, 4, "RW", 0, 28'h0000000, 1, 0, 0);
         drying.configure(this, 1, 3, "RO", 0, 1'b0, 1, 0, 0);
         spraying.configure(this, 1, 2, "RO", 0, 1'b0, 1, 0, 0);
         using.configure(this, 1, 1, "RO", 0, 1'b0, 1, 0, 0);
         ready.configure(this, 1, 0, "RO", 0, 1'b0, 1, 0, 0);
      endfunction
   endclass




   /* BLOCKS */



   //--------------------------------------------------------------------
   // Class: dti_dynamo_regs
   // 
   //--------------------------------------------------------------------

   class dti_dynamo_regs extends uvm_reg_block;
      `uvm_object_utils(dti_dynamo_regs)

      rand data reg_data; // Data Register
      rand ctrl reg_ctrl; // Control Register
      rand stt reg_stt; // Status Register

      uvm_reg_map map; 


      // Function: new
      // 
      function new(string name = "dti_dynamo_regs");
         super.new(name, build_coverage(UVM_CVR_ALL));
      endfunction


      // Function: build
      // 
      virtual function void build();
         reg_data = data::type_id::create("reg_data");
         reg_data.configure(this, null, "");
         reg_data.add_hdl_path_slice("data_tem", 0, 2);
         reg_data.build();

         reg_ctrl = ctrl::type_id::create("reg_ctrl");
         reg_ctrl.configure(this, null, "");
         reg_ctrl.add_hdl_path_slice("ctrl_warm_en", 0, 1);
         reg_ctrl.build();

         reg_stt = stt::type_id::create("reg_stt");
         reg_stt.configure(this, null, "");
         reg_stt.add_hdl_path_slice("stt_drying", 3, 1);
         reg_stt.add_hdl_path_slice("stt_spraying", 2, 1);
         reg_stt.add_hdl_path_slice("stt_using", 1, 1);
         reg_stt.add_hdl_path_slice("stt_ready", 0, 1);
         reg_stt.build();

         map = create_map("map", 'h0, 4, UVM_LITTLE_ENDIAN, 1);
         default_map = map;

         map.add_reg(reg_data, 'h0, "RW");
         map.add_reg(reg_ctrl, 'h4, "RW");
         map.add_reg(reg_stt, 'h8, "RW");

         lock_model();
      endfunction
   endclass


endpackage
